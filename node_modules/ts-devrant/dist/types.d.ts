export * from './response-types';
export declare enum PostType {
    Rant = "rant",
    JokeMeme = "joke/meme",
    Question = "question",
    DevRant = "devRant",
    Random = "random",
    Collab = "collab",
    Undefined = "undefined"
}
export declare enum RantType {
    Rant = 1,
    Collab = 2,
    JokeMeme = 3,
    Question = 4,
    DevRant = 5,
    Random = 6,
    Undefined = 7
}
export declare enum NotificationKind {
    CommentContent = "comment_content",
    CommentDiscuss = "comment_discuss",
    CommentMention = "comment_mention",
    CommentVote = "comment_vote",
    ContentVote = "content_vote",
    CantSub = "rant_sub"
}
export interface Notification {
    comment_id?: number;
    rant_id?: number;
    created_time: number;
    read: 0 | 1;
    type: NotificationKind;
    uid: number;
}
export interface Notifications {
    check_time: number;
    items: Notification[];
    username_map: {
        [userId: number]: {
            name: string;
            avatar: Avatar;
        };
    };
    unread: {
        all: number;
        comments: number;
        mentions: number;
        subs: number;
        total: number;
        upvotes: number;
    };
}
export interface Profile {
    username: string;
    score: number;
    about: string;
    location: string;
    created_time: number;
    skills: string;
    github: string;
    avatar: Avatar;
    avatar_sm: Avatar;
    dpp: DevRantSupporter;
    content: {
        content: {
            rants: Array<RantInFeed>;
            upvoted: Array<RantInFeed>;
            comments: Array<Comment>;
            favorites: Array<RantInFeed>;
        };
        counts: {
            rants: number;
            upvoted: number;
            comments: number;
            favorites: number;
            collabs: number;
        };
    };
}
export declare type SessionHash = string;
export declare type DevRantSupporter = 0 | 1;
export declare enum Action {
    None = "none",
    GroupRant = "grouprant",
    Rant = "rant"
}
export interface News {
    id: number;
    type: 'intlink' | unknown;
    headline: string;
    body: string;
    footer: string;
    height: number;
    action: Action;
}
export interface Token {
    id: string;
    key: string;
    user_id: number;
}
export interface Avatar {
    b: string;
    i: string;
}
export interface RantEntry {
    id: number;
    score: number;
    links?: LinkDef[];
    created_time: number;
    attached_image: Image;
    vote_state: VoteState;
    user_dpp: DevRantSupporter;
    user_id: number;
    user_username: string;
    user_score: number;
    user_avatar: Avatar;
    user_avatar_lg?: Avatar;
}
export interface Image {
    url: string;
    width: number;
    height: number;
}
export declare type Tags = string[];
export declare type RantTags = [PostType] & Tags;
export interface LinkDef {
    end: number;
    start: number;
    short_url: string;
    special: 1;
    title: string;
    type: "url";
    url: string;
}
export interface RantInFeed extends RantEntry {
    user_dpp: DevRantSupporter;
    text: string;
    num_comments: number;
    tags: RantTags;
    edited: boolean;
    link: string;
    rt: number;
    rc: number;
    c_type?: CollabState;
    c_type_long?: string;
}
export declare enum CollabState {
    Unknown = 0,
    OpenSourceProject = 1,
    ExistingOpenSourceProject = 2,
    ProjectIdea = 3,
    ExistingProject = 4
}
export declare enum VoteState {
    Unvoted = 0,
    Upvoted = 1,
    Downvoted = -1,
    NotAllowed = -2
}
export interface Comment extends RantEntry {
    rand_id: number;
    body: string;
}
//# sourceMappingURL=types.d.ts.map