/// <reference types="node" />
import * as t from "./types";
export declare enum Sort {
    Algo = "algo",
    Top = "top",
    Recent = "recent"
}
export declare enum Range {
    Day = "day",
    Week = "week",
    Month = "month",
    All = "all"
}
export declare function profile(userId: string, content?: string, skip?: number, token?: t.Token): Promise<t.ProfileResponse>;
export declare function rant(rantId: number, token?: t.Token): Promise<t.RantResponse>;
export declare function rants(sort: Sort, limit: number, skip: number, range: Range, token?: t.Token): Promise<t.RantFeedResponse>;
export declare function search(term: string): Promise<t.SearchResponse>;
export declare function login(username: string, password: string): Promise<t.AuthResponse>;
export declare function register(username: string, email: string, password: string): Promise<t.RegisterResponse>;
export declare function postRant(rant: string, tags: t.Tags, rantType: t.RantType, image: File | Blob | Buffer | NodeJS.ReadableStream | null | undefined, token: t.Token): Promise<t.ResponseSignal & {
    rant_id: number;
}>;
export declare function editRant(rantId: number, newText: string, newTags: t.Tags, newImage: File | Blob | Buffer | NodeJS.ReadableStream | null | undefined, token: t.Token): Promise<unknown>;
export declare function deleteRant(rantId: number, token: t.Token): Promise<unknown>;
export declare function comment(commentId: number, token?: t.Token): Promise<t.CommentResponse>;
export declare function postComment(rantId: number, comment: string, image: File | Blob | Buffer | NodeJS.ReadableStream | null | undefined, token: t.Token): Promise<unknown>;
export declare function editComment(commentId: number, newComment: string, newImage: File | Blob | Buffer | NodeJS.ReadableStream | null | undefined, token: t.Token): Promise<unknown>;
export declare function deleteComment(commentId: number, token: t.Token): Promise<unknown>;
export declare function vote(vote: t.VoteState, rantId: number, token: t.Token): Promise<t.RantResponse>;
export declare function voteComment(vote: t.VoteState, commentId: number, token: t.Token): Promise<t.CommentResponse>;
export declare function surpriseRant(token?: t.Token): Promise<unknown>;
export declare function notifications(token: t.Token, lastTime?: number): Promise<t.NotificationResponse>;
export declare function clearNotifications(token: t.Token): Promise<unknown>;
export declare function collabs(sort: Sort, limit: number, skip: number, token: t.Token): Promise<unknown>;
export declare function stories(sort: Sort, limit: number, skip: number, range: Range, token: t.Token): Promise<unknown>;
export declare function weekly(sort: Sort, limit: number, skip: number, week: number, token: t.Token): Promise<unknown>;
export declare function listWeekly(token: t.Token): Promise<unknown>;
export declare function favorite(rantId: number, token: t.Token): Promise<unknown>;
export declare function unFavorite(rantId: number, token: t.Token): Promise<unknown>;
export declare function subscribe(toUserId: number, token: t.Token): Promise<unknown>;
export declare function unSubscribe(toUserId: number, token: t.Token): Promise<unknown>;
export declare function getFrequentSearchTerms(): Promise<t.TagsResponse>;
export declare function getIdByUsername(username: string): Promise<t.UserIdResponse>;
//# sourceMappingURL=api.d.ts.map