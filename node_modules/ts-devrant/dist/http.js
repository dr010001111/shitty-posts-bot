"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.request = void 0;
const debug_1 = __importDefault(require("debug"));
const form_data_1 = __importDefault(require("form-data"));
const node_fetch_1 = __importDefault(require("node-fetch"));
const url_polyfill_1 = __importDefault(require("url-polyfill"));
const FileType = require("file-type");
const config_1 = require("./config");
const _global = typeof global !== "undefined" ? global : window;
const URL = _global.URL || url_polyfill_1.default;
const FormData = _global.FormData || form_data_1.default;
const fetch = _global.fetch || node_fetch_1.default;
const log = debug_1.default("dr:request");
log.log = console.log.bind(console);
const alwaysIncludeParams = {
    app: 3,
};
function request(url, params = {}, options = {}) {
    return __awaiter(this, void 0, void 0, function* () {
        log("fetch", url);
        const config = config_1.getConfig();
        const requestUrl = new URL(url instanceof Array ? url.join("/") : url, config.api);
        const addParams = (addFunc) => __awaiter(this, void 0, void 0, function* () {
            const entries = Object.entries(Object.assign(Object.assign({}, alwaysIncludeParams), params));
            for (const entry of entries) {
                yield addFunc(entry);
            }
        });
        let form = null;
        switch (options.method) {
            case "POST": {
                form = new FormData();
                yield addParams(([name, _value]) => __awaiter(this, void 0, void 0, function* () {
                    const value = _value;
                    if (form) {
                        let fileName = undefined;
                        if (name === 'image') {
                            if (value.constructor.name === "File") {
                                fileName = `attachment.${value.type
                                    .split('/')
                                    .pop()}`;
                            }
                            else if (value.constructor.name === "Buffer") {
                                const type = yield FileType.fromBuffer(value);
                                fileName = type
                                    ? `attachment.${type.ext}`
                                    : undefined;
                            }
                            else {
                                const type = yield FileType.fromStream(value);
                                fileName = type
                                    ? `attachment.${type.ext}`
                                    : undefined;
                            }
                        }
                        form.append(name, value instanceof Array
                            ? value.join()
                            : value, fileName);
                    }
                }));
                break;
            }
            default: {
                addParams(([name, value]) => {
                    requestUrl.searchParams.set(name, String(value));
                });
            }
        }
        const response = yield fetch(requestUrl.toString(), Object.assign(Object.assign({}, options), { body: form }));
        let json = null;
        if (response.headers.get("content-type") === "application/json") {
            json = yield response.json();
        }
        else if (!response.ok) {
            throw new Error(`${response.status}: ${response.statusText}; ${yield response.text()}`);
        }
        if (json && json.error) {
            throw new Error(json.error);
        }
        return json;
    });
}
exports.request = request;
//# sourceMappingURL=http.js.map