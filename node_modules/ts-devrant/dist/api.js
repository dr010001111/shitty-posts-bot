"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getIdByUsername = exports.getFrequentSearchTerms = exports.unSubscribe = exports.subscribe = exports.unFavorite = exports.favorite = exports.listWeekly = exports.weekly = exports.stories = exports.collabs = exports.clearNotifications = exports.notifications = exports.surpriseRant = exports.voteComment = exports.vote = exports.deleteComment = exports.editComment = exports.postComment = exports.comment = exports.deleteRant = exports.editRant = exports.postRant = exports.register = exports.login = exports.search = exports.rants = exports.rant = exports.profile = exports.Range = exports.Sort = void 0;
const http_1 = require("./http");
const utils_1 = require("./utils");
var Sort;
(function (Sort) {
    Sort["Algo"] = "algo";
    Sort["Top"] = "top";
    Sort["Recent"] = "recent";
})(Sort = exports.Sort || (exports.Sort = {}));
var Range;
(function (Range) {
    Range["Day"] = "day";
    Range["Week"] = "week";
    Range["Month"] = "month";
    Range["All"] = "all";
})(Range = exports.Range || (exports.Range = {}));
function profile(userId, content = "all", skip = 0, token) {
    return __awaiter(this, void 0, void 0, function* () {
        return http_1.request(["users", userId], Object.assign(Object.assign({}, utils_1.mapTokenToRequest(token)), { content,
            skip }));
    });
}
exports.profile = profile;
function rant(rantId, token) {
    return __awaiter(this, void 0, void 0, function* () {
        return http_1.request(["devrant/rants", rantId], utils_1.mapTokenToRequest(token));
    });
}
exports.rant = rant;
function rants(sort, limit, skip, range, token) {
    return __awaiter(this, void 0, void 0, function* () {
        return http_1.request(["devrant/rants"], Object.assign(Object.assign({}, utils_1.mapTokenToRequest(token)), { sort,
            limit,
            skip,
            range }));
    });
}
exports.rants = rants;
function search(term) {
    return __awaiter(this, void 0, void 0, function* () {
        return http_1.request("devrant/search", {
            term,
        });
    });
}
exports.search = search;
function login(username, password) {
    return __awaiter(this, void 0, void 0, function* () {
        return http_1.request("users/auth-token", {
            username,
            password,
        }, { method: "POST" });
    });
}
exports.login = login;
function register(username, email, password) {
    return __awaiter(this, void 0, void 0, function* () {
        return http_1.request("users", {
            username,
            email,
            password,
        }, { method: "POST" });
    });
}
exports.register = register;
function postRant(rant, tags, rantType, image = null, token) {
    return __awaiter(this, void 0, void 0, function* () {
        return http_1.request("devrant/rants", Object.assign(Object.assign({}, utils_1.mapTokenToRequest(token)), { rant, type: rantType, tags,
            image }), { method: 'POST' });
    });
}
exports.postRant = postRant;
function editRant(rantId, newText, newTags, newImage = null, token) {
    return __awaiter(this, void 0, void 0, function* () {
        return http_1.request(["devrant/rants", rantId], Object.assign(Object.assign({}, utils_1.mapTokenToRequest(token)), { rant: newText, tags: newTags, image: newImage }), { method: "POST" });
    });
}
exports.editRant = editRant;
function deleteRant(rantId, token) {
    return __awaiter(this, void 0, void 0, function* () {
        return http_1.request(["devrant/rants", rantId], utils_1.mapTokenToRequest(token), {
            method: "DELETE",
        });
    });
}
exports.deleteRant = deleteRant;
function comment(commentId, token) {
    return __awaiter(this, void 0, void 0, function* () {
        return http_1.request(["comments", commentId], Object.assign(Object.assign({}, utils_1.mapTokenToRequest(token)), { comment }));
    });
}
exports.comment = comment;
function postComment(rantId, comment, image = null, token) {
    return __awaiter(this, void 0, void 0, function* () {
        return http_1.request(["devrant/rants", rantId, "comments"], Object.assign(Object.assign({}, utils_1.mapTokenToRequest(token)), { comment,
            image }), { method: "POST" });
    });
}
exports.postComment = postComment;
function editComment(commentId, newComment, newImage = null, token) {
    return __awaiter(this, void 0, void 0, function* () {
        return http_1.request(["comments", commentId], Object.assign(Object.assign({}, utils_1.mapTokenToRequest(token)), { comment: newComment, image: newImage }), { method: "POST" });
    });
}
exports.editComment = editComment;
function deleteComment(commentId, token) {
    return __awaiter(this, void 0, void 0, function* () {
        return http_1.request(["comments", commentId], utils_1.mapTokenToRequest(token), {
            method: "DELETE",
        });
    });
}
exports.deleteComment = deleteComment;
function vote(vote, rantId, token) {
    return __awaiter(this, void 0, void 0, function* () {
        return http_1.request(["devrant/rants", rantId, "vote"], Object.assign(Object.assign({}, utils_1.mapTokenToRequest(token)), { vote }), { method: "POST" });
    });
}
exports.vote = vote;
function voteComment(vote, commentId, token) {
    return __awaiter(this, void 0, void 0, function* () {
        return http_1.request(["comments", commentId, "vote"], Object.assign(Object.assign({}, utils_1.mapTokenToRequest(token)), { vote }), { method: "POST" });
    });
}
exports.voteComment = voteComment;
function surpriseRant(token) {
    return __awaiter(this, void 0, void 0, function* () {
        return http_1.request("devrant/rants/surprise", utils_1.mapTokenToRequest(token));
    });
}
exports.surpriseRant = surpriseRant;
function notifications(token, lastTime = 0) {
    return __awaiter(this, void 0, void 0, function* () {
        return http_1.request("users/me/notif-feed", Object.assign(Object.assign({}, utils_1.mapTokenToRequest(token)), { last_time: lastTime, ext_prof: 1 }));
    });
}
exports.notifications = notifications;
function clearNotifications(token) {
    return __awaiter(this, void 0, void 0, function* () {
        return http_1.request("users/me/notif-feed", utils_1.mapTokenToRequest(token), {
            method: "DELETE",
        });
    });
}
exports.clearNotifications = clearNotifications;
function collabs(sort, limit, skip, token) {
    return __awaiter(this, void 0, void 0, function* () {
        return http_1.request("devrant/collabs", Object.assign(Object.assign({}, utils_1.mapTokenToRequest(token)), { sort,
            limit,
            skip }));
    });
}
exports.collabs = collabs;
function stories(sort, limit, skip, range, token) {
    return __awaiter(this, void 0, void 0, function* () {
        return http_1.request("devrant/story-rants", Object.assign(Object.assign({}, utils_1.mapTokenToRequest(token)), { sort,
            limit,
            skip,
            range }));
    });
}
exports.stories = stories;
function weekly(sort, limit, skip, week, token) {
    return __awaiter(this, void 0, void 0, function* () {
        return http_1.request("devrant/weekly-rants", Object.assign(Object.assign({}, utils_1.mapTokenToRequest(token)), { sort,
            limit,
            skip,
            week }));
    });
}
exports.weekly = weekly;
function listWeekly(token) {
    return __awaiter(this, void 0, void 0, function* () {
        return http_1.request("devrant/weekly-list", utils_1.mapTokenToRequest(token));
    });
}
exports.listWeekly = listWeekly;
function favorite(rantId, token) {
    return __awaiter(this, void 0, void 0, function* () {
        return http_1.request(["devrant/rants", rantId, "favorite"], utils_1.mapTokenToRequest(token), { method: "POST" });
    });
}
exports.favorite = favorite;
function unFavorite(rantId, token) {
    return __awaiter(this, void 0, void 0, function* () {
        return http_1.request(["devrant/rants", rantId, "unfavorite"], utils_1.mapTokenToRequest(token), { method: "POST" });
    });
}
exports.unFavorite = unFavorite;
function subscribe(toUserId, token) {
    return __awaiter(this, void 0, void 0, function* () {
        return http_1.request(["users", toUserId, "subscribe"], utils_1.mapTokenToRequest(token), {
            method: "POST",
        });
    });
}
exports.subscribe = subscribe;
function unSubscribe(toUserId, token) {
    return __awaiter(this, void 0, void 0, function* () {
        return http_1.request(["users", toUserId, "subscribe"], utils_1.mapTokenToRequest(token), {
            method: "DELETE",
        });
    });
}
exports.unSubscribe = unSubscribe;
function getFrequentSearchTerms() {
    return __awaiter(this, void 0, void 0, function* () {
        return http_1.request("devrant/search/tags");
    });
}
exports.getFrequentSearchTerms = getFrequentSearchTerms;
function getIdByUsername(username) {
    return __awaiter(this, void 0, void 0, function* () {
        return http_1.request("get-user-id", {
            username,
        });
    });
}
exports.getIdByUsername = getIdByUsername;
//# sourceMappingURL=api.js.map